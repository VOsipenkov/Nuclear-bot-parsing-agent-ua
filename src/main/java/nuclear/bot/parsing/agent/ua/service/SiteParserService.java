package nuclear.bot.parsing.agent.ua.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import nuclear.bot.core.dto.AgentMessage;
import nuclear.bot.parsing.agent.ua.service.dto.SaveEcoBotDto;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import static java.util.Objects.isNull;
import static java.util.Objects.nonNull;
import static org.springframework.util.CollectionUtils.isEmpty;

@Slf4j
@Service
@RequiredArgsConstructor
public class SiteParserService {

    private final RestTemplate restTemplate;
    private final DeviceAgentMessageMapper mapper;
    private final ObjectMapper objectMapper;
    @Value("${siteconnection.url}")
    private String siteUrl;

    @Value("${max.radiation.rate}")
    private int MAX_RATE;//максимальное допустимое значение радицации

    // Исключаем зараженные точки на карте
    private final List<Integer> excludeRadarList = List.of(3725, 3729, 3731, 3732, 3733, 3734, 3756,
            3765, 3770, 3771, 3774,
            3775, 3777, 3778);

    // Включаем только заранее проверенные точки (на момент написания кода значения до 200, максимальное что было 150)
    private final List<Integer> includeRaradList = List.of(61, 62, 64, 65, 66, 67, 69, 71, 72, 76, 77, 81, 82, 83, 84, 85, 86, 87, 88, 3589, 3705, 3716, 3717, 3722, 3723, 3724, 3726, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3744, 3747, 3748, 3750, 3751, 3753, 3757, 3758, 3760, 3761, 3763, 3764, 3766, 3767, 3768, 3773, 3779, 3780, 3781, 3782, 3783, 3784, 3785, 3786, 3787, 3788, 3789, 3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3848, 3849, 3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860, 3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882, 3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3913, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3974, 3975, 3976, 3977, 3978, 3979, 3980, 3981, 3982, 3983, 3984, 3986, 3987, 3989, 3990, 3991, 3993, 3994, 3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4128, 4129, 4130, 4131, 4132, 4160, 4165, 4270, 13810, 14180, 14633, 14634, 14746, 15000, 16303, 16323, 18973, 19719, 19720, 19867, 20379, 20397, 20413, 20515, 20516, 20517, 20519, 20520, 20538, 20539, 20540, 20541, 20542, 20566, 20567, 20568, 20642, 20660, 20673, 20674, 20690, 20691, 20692, 20693, 20694, 20695, 20696, 20697, 20700, 20701, 20702, 20703, 20704, 20705, 20706, 20707, 20710, 20711, 20712, 20713, 20714, 20716, 20717, 20719, 20720, 20722, 20723, 20724, 20725, 20726, 20727, 20728, 20729, 20733, 20734, 20735, 20736, 20737, 20738, 20739, 20740, 20741, 20742, 20743, 20744, 20745, 20746, 20747, 20748, 20749, 20750, 20751, 20752, 20753, 20754, 20755, 20756, 20758, 20759, 20760, 20761, 20762, 20763, 20764, 20765, 20766, 20767, 20768, 20769, 20771, 20772, 20773, 20774, 20775, 20776, 20777, 20778, 20779, 20780, 20781, 20782, 20783, 20784, 20785, 20786, 20787, 20788, 20789, 20790, 20791, 20792, 20793, 20794, 20795, 20796, 20797, 20798, 20799, 20800, 20801, 20802, 20803, 20804, 20805, 20806, 20807, 20808, 20809, 20810, 20811, 20812, 20813, 20814, 20815, 20816, 20817, 20818, 20819, 20820, 20821, 20822, 20823, 20824, 20825, 20826, 20827, 20828, 20829, 20830, 20831, 20832, 20833, 20834, 20835, 20836, 20837, 20838, 20839, 20840, 20841, 20847, 20848, 20849, 20850, 20851, 20855, 20856, 20857, 20858, 20862, 20863, 20864, 20865, 20866, 20867, 20868, 20869, 20870, 20871, 20872, 20873, 20874, 20875, 20876, 20877, 20879, 20880, 20881, 20882, 20883, 20884, 20885, 20886, 20887, 20888, 20889, 20890, 20891, 20892, 20893, 20894, 20895, 20896, 20897, 20898, 20899, 20900, 20901, 20902, 20903, 20904, 20905, 20906, 20907, 20908, 20909, 20910, 20911, 20912, 20913, 20914, 20915, 20916, 20917, 20918, 20919, 20920, 20921, 20922, 20923, 20924, 20925, 20926, 20927, 20928, 20929, 20930, 20931, 20932, 20933, 20934, 20935, 20936, 20937, 20938, 20939, 20940, 20941, 20942, 20943, 20944, 20945, 20946, 20947, 20948, 20949, 20950, 20951, 20952, 20953, 20954, 20955, 20956, 20957, 20959, 20960, 20961, 20962, 20963, 20964, 20965, 20966, 20967, 20968, 20971, 20972, 20973, 20974, 20975, 20976, 20977, 20978, 20979, 20980, 20981, 20982, 20983, 20984, 20985, 20986, 20987, 20989, 20990, 20992, 20993, 20994, 20996, 20997, 20998, 20999, 21000, 21001, 21005, 21007, 21008, 21009, 21012, 21014, 21017, 21019, 21081, 21082, 21083, 21607, 21735, 21742, 21766, 21930, 21944, 21976, 22087, 22296, 22297, 22298, 22299, 22300, 22301, 22302, 22303, 22304, 22305, 22306, 22307, 22308, 22309, 22310, 22311, 22312, 22313, 22314, 22315, 22316, 22317, 22318, 22319, 22320, 22321, 22322, 22415, 22561, 22562, 22563, 22564, 22565, 22622, 22643, 22800, 22877, 22906, 22954, 23001, 23003, 23008, 23009, 23014, 23015, 23016, 23017, 23034, 23048, 23049, 23481, 23482, 23483, 23484, 23503, 23505, 23519, 23715, 23717, 23782, 23800, 23801, 23802, 23829, 23836, 23940, 23941, 23942, 23945, 23946, 23955, 23956, 23965, 23971, 23972, 23973, 23974, 23975, 23977, 23978, 23979, 23982, 23983, 23984, 23985, 23986, 23987, 23988, 23989, 23990, 23991, 23992, 23993, 23996, 23997, 23999, 24000, 24001, 24003, 24004, 24009, 24012, 24013, 24014, 24015, 24018, 24025, 24028, 24031, 24032, 24033, 24034, 24036, 24037, 24040, 24041, 24042, 24043, 24047);

    public List<AgentMessage> parseSite() {
        try {
            var data = restTemplate.getForObject(siteUrl, String.class);
            var saveEcoBotDto = objectMapper.readValue(data, SaveEcoBotDto.class);
            return toAgentMessage(saveEcoBotDto);
        } catch (Exception e) {
            log.error("Ошибка при попытке получить ответ от сайта {}", siteUrl);
        }
        return null;
    }

    private List<AgentMessage> toAgentMessage(SaveEcoBotDto saveEcoBotDto) {
        if (isNull(saveEcoBotDto) || isEmpty(saveEcoBotDto.getDevices())) {
            return Collections.emptyList();
        }
        return saveEcoBotDto.getDevices().stream()
                .filter(d -> nonNull(d.getGamma()))
                .filter(d -> !excludeRadarList.contains(d.getI()))
                .filter(d -> includeRaradList.contains(d.getI()))
                .map(mapper::toAgentMessage)
                .collect(Collectors.toList());
    }
}
